{"majorversion": 3, "classmap": {"Xmla.Rowset": {"name": "Xmla.Rowset", "for": "Xmla", "innerClasses": ["Xmla", "Xmla"], "constructors": [{"params": [{"type": "DOMDocument", "name": "node", "description": "  The responseXML result returned by server in response to a <code>Discover</code> request."}, {"type": "string", "name": "requestTtype", "description": "  The requestType identifying the particular schema rowset to construct. This facilitates implementing field getters for a few complex types."}], "description": "This class implements an XML/A Rowset object, which is the result of performing the <code>Discover</code> method (see <code><a href=\"Xmla.html#method_discover\">discover()</a></code>)."}], "namespace": "", "module": "xmla", "guessedname": "Rowset", "methods": {"getFields": {"return": {"type": "fieldDef[]", "description": "An (ordered) array of field definition objects."}, "description": "Retrieve the collection of fieldDef objects for this rowset.\nA fieldDef describes a field (column). It has the following properties:\n<dl>\n<dt>name</dt><dd>string. This is the (possibly escaped) name of the field as it appears in the XML document</dd>\n<dt>label</dt><dd>string. This is the human readable name for this field. You should use this name for display purposes and for building restrictions</dd>\n<dt>index</dt><dd>int. The ordinal position of this field. Fields are numbered starting from 0.</dd>\n<dt>type</dt><dd>string. The name of the XML data type for the values that appear in this column</dd>\n<dt>minOccurs</dt><dd>string. The minimal number of occurrences of a value. \"0\" means the field is optional.</dd>\n<dt>maxOccurs</dt><dd>string. If this is parseable as an integer, that integer specifies the number of times a value can appear in this column. \"unbounded\" means there is no declared limit.</dd>\n<dt>getter</dt><dd>function. This function is used to extract a value from the XML document for this field.</dd>\n</dl>", "guessedname": "getFields", "guessedtype": "function"}, "hasMoreRows": {"return": {"type": "bool", "description": "true in case there are more rows to traverse. false if all rows have been traversed."}, "description": "Indicates wheter the rowset that can be traversed.\nYou can use this method together with the \n<code><a href=\"#method_next\">next()</a></code> method\nto drive a <code>while</code> loop to traverse all rows in the rowset, like so:\n<pre>\n&nbsp;while(rowset.hasMoreRows()){\n&nbsp;    ...process row...\n&nbsp;    rowsete.next();\n&nbsp;}\n</pre>", "guessedname": "hasMoreRows", "guessedtype": "function"}}, "file": "Xmla.js", "guessedtype": "function", "shortname": "Xmla.Rowset", "description": "This class implements an XML/A Rowset object, which is the result of performing the <code>Discover</code> method (see <code><a href=\"Xmla.html#method_discover\">discover()</a></code>)."}, "Xmla": {"name": "Xmla", "constructors": [{"params": [{"type": "", "name": "options", "description": ""}], "description": "<p>\nThe Xmla class provides a javascript API to communicate XML for Analysis (XML/A) over HTTP.\nXML/A is an industry standard protocol that allows webclients to work with OLAP servers.\nTo fully understand the scope and purpose of this utility, it is highly recommended\nto read <a href=\"http://xmla.org/xmla1.1.doc\">the XML/A specification</a> \n(MS Word format. For other formats, \nsee: <a href=\"http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification\">http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification</a>). \n</p>"}], "namespace": "", "module": "xmla", "guessedname": "Xmla", "methods": {"discoverDataSources": {"return": {"type": "Xmla.Rowset", "description": "The result of the invoking the XML/A <code>Discover</code> method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the <code>DISCOVER_DATASOURCES</code> schema rowset."}, "description": "Invokes the <code><a href=\"#method_discover\">discover()</a></code> method using <code><a href=\"#property_DISCOVER_DATASOURCES\"></a></code> as value for the <code>requestType</code>, \nand retrieves the <code>DISCOVER_DATASOURCES</code> schema rowset. \nThe rowset has the following columns:\n<table border=\"1\" class=\"schema-rowset\">\n<tr>\n<th>Column Name</th>\n<th>Type</th>\n<th>Description</th>\n<th>Restriction</th>\n<th>Nullable</th>\n</tr>\n<tr>\n<td>\nDataSourceName\n</td>\n<td>\nstring\n</td>\n<td>\nA name that identifies this data source.\n</td>\n<td>\nYes\n</td>\n<td>\nNo\n</td>\n</tr>\n<tr>\n<td>\nDataSourceDescription\n</td>\n<td>\nstring\n</td>\n<td>\nHuman readable description of the datasource \n</td>\n<td>\nNo\n</td>\n<td>\nYes\n</td>\n</tr>\n<tr>\n<td>\nURL\n</td>\n<td>\nstring\n</td>\n<td>\nURL to use to submit requests to this provider.\n</td>\n<td>\nYes\n</td>\n<td>\nYes\n</td>\n</tr>\n<tr>\n<td>\nDataSourceInfo\n</td>\n<td>\nstring\n</td>\n<td>\nConnectstring\n</td>\n<td>\nNo\n</td>\n<td>\nYes\n</td>\n</tr>\n<tr>\n<td>\nProviderName\n</td>\n<td>\nstring\n</td>\n<td>\nA name indicating the product providing the XML/A implementation\n</td>\n<td>\nYes\n</td>\n<td>\nYes\n</td>\n</tr>\n<tr>\n<td>\nProviderType\n</td>\n<td>\nstring[]\n</td>\n<td>\nThe kind of data sets supported by this provider. \nThe following values are defined by the XML/A specification:\n<dl>\n<dt>TDP</dt><dd>tabular data provider.</dd>\n<dt>MDP</dt><dd>multidimensiona data provider.</dd>\n<dt>DMP</dt><dd>data mining provider.</dd>\n</dl>\nNote: multiple values are possible.\n</td>\n<td>\nYes\n</td>\n<td>\nNo\n</td>\n</tr>\n<tr>\n<td>\nAuthenticationMode\n</td>\n<td>\nstring\n</td>\n<td>\nType of security offered by the provider\nThe following values are defined by the XML/A specification:\n<dl>\n<dt>Unauthenticated</dt><dd>no user ID or password needs to be sent.</dd>\n<dt>Authenticated</dt><dd>User ID and password must be included in the information required for the connection.</dd>\n<dt>Integrated</dt><dd> the data source uses the underlying security to determine authorization</dd>\n</dl>\n</td>\n<td>\nYes\n</td>\n<td>\nNo\n</td>\n</tr>\n</table>", "param": "options {Object} An object whose properties convey the options for the XML/A a <code>DISCOVER_DATASOURCES</code> request.", "params": [{"type": "Object", "name": "options", "description": "  An object whose properties convey the options for the XML/A a <code>DISCOVER_DATASOURCES</code> request."}], "guessedname": "discoverDataSources", "guessedtype": "function"}, "addListener": {"params": [{"type": "Object", "name": "listener", "description": "  An object that defines the events and the notification function to be called."}], "description": "This method can be used to register a listener to one or more events.\nThe <code>listener</code> argument should have the following structure: <pre>{\nevents: [...event names...],\nhandler: function() {...code to run upon notification...},\nscope: object\n}</pre>\n<dl>\n<dt><code>events</code></dt>\n<dd>string[] REQUIRED. This must be an array containing final static <code>EVENT_XXX</code> string constant values. \nYou can also use one of the predefined <code>EVENT_XXX</code> array constant values, \nor use array concatenation and compose a custom list of event names.\n</dd>\n<dt><code>handler</code></dt>\n<dd>function REQUIRED. This function will be called and notified whenever one of the specified events occurs.\nThe function is called in scope of the <code>scope</code> property, otherwise a global function (= <code>window</code> scope) is assumed.\n</dd>\n<dt><code>scope</code></dt>\n<dd>Object. When specified, this object is used as the <code>this</code> object when calling the handler.\nWhen not specified, the global <code>window</code> is used.\n</dd>\n</dl>", "guessedname": "addListener", "guessedtype": "function"}, "request": {"return": {"type": "Xmla.Rowset|Xmla.Resultset", "description": "The result of the invoking the XML/A method. For an asynchronous request, the return value is not defined. For synchronous requests, <code>Discover</code> requests return an instance of a <code>Xmla.Rowset</code>, and <code>Execute</code> results return an instance of a <code>Xmla.Resultset</code>."}, "params": [{"type": "Object", "name": "options", "description": "  An object whose properties convey the options for the request."}], "description": "Sends a request to the XML/A server.\nThis method is rather low-level and allows full control over the request \nby passing an options object. General properties of the options object are:\n<ul>\n<li><code>method</code> {string} REQUIRED the XML/A method to invoke (<code>Discover</code> or <code>Execute</code>, \nor use the constants <code><a href=\"#property_METHOD_DISCOVER\">METHOD_DISCOVER</a></code> and <code><a href=\"#property_METHOD_EXECUTE\">METHOD_EXECUTE</a></code>).</li>\n<li><code>url</code> {string} REQUIRED the URL of XML/A service, or of a XML/A datasource. \nTypically, you first use the URL of a XML/A service (like <code>http://your.pentaho.server:8080/pentaho/Xmla?userid=joe&amp;password=password</code>) \nand use that to retrieve the <code>DISCOVER_DATASOURCES</code> rowset. \nThen, you can connect to a XML/A datasource using the value returned by the <code>URL</code> column of the <code>DISCOVER_DATASOURCES</code> rowset \n(typically, you also have to set a <code>DataSourceInfo</code> property using the value found in the <code>DataSourceInfo</code> column of the <code>DISCOVER_DATASOURCES</code> rowset).\n</li>\n<li>\n<code>properties</code> {Object} XML/A properties. \nThe appropriate types and values of XML/A properties are dependent upon the specific method and requestType.\nThe XML/A standard defines a set of pre-defined properties. \nThe <code>Xmla</code> class defines a static final property for each of these (see the <code>PROP_XXX</code> constants).\nThe list of all valid properties can be obtained from the <code>DISCOVER_PROPERTIES</code> schema rowset \n(see <code><a href=\"#method_discoverProperties()\">discoverProperties()</a></code>). \nEach javascript property of the <code>properties</code> object is mapped literally to a XML/A property.\n</li>\n<li><code>requestType</code> - {string} Applies to the Discover method and indicates the kind of schema rowset to retrieve.\nYou can use one of the following predefined constants: <ul>\n<li><code><a href=\"#property_DISCOVER_DATASOURCES\">DISCOVER_DATASOURCES</a></code></li>\n<li><code><a href=\"#property_DISCOVER_ENUMERATORS\">DISCOVER_ENUMERATORS</a></code></li>\n<li><code><a href=\"#property_DISCOVER_KEYWORDS\">DISCOVER_KEYWORDS</a></code></li>\n<li><code><a href=\"#property_DISCOVER_LITERALS\">DISCOVER_LITERALS</a></code></li>\n<li><code><a href=\"#property_DISCOVER_PROPERTIES\">DISCOVER_PROPERTIES</a></code></li>\n<li><code><a href=\"#property_DISCOVER_SCHEMA_ROWSETS\">DISCOVER_SCHEMA_ROWSETS</a></code></li>\n</ul>\nYou can also use any Schema Rowset Constant returned in the <code>SchemaName</code> column of the <code>DISCOVER_SCHEMA_ROWSETS</code> rowset\n(see: <code><a href=\"method_discoverMDSchemaRowsets\">discoverMDSchemaRowsets()</a></code>).\n</li>\n<li>\n<code>restrictions</code> {Object} XML/A restrictions.\nRestrictions apply only to the XML/A Discover method, and is used to filter the requested schema rowset. \nEach javascript property of the <code>restrictions</code> object is mapped to a column of the requested schema rowset.\nThe types and values of the restrictions are dependent upon which schema rowset is requested.\nThe available restrictions are specified by the <code>Restrictions</code> column of the <code>DISCOVER_SCHEMA_ROWSETS</code> schema rowset.\n</li>\n<li><code>async</code> {boolean} \nDetermines how the request is performed:<ul>\n<li><code>true</code>: The request is performed asynchronously: the call to <code>request()</code> will not block and return immediately.\nIn this case, the return value of the <code>request()</code> method is not defined, \nand the response must be received by registering a listener \n(see <code><a href=\"#method_addListener\">addListener()</a></code>).\n</li>\n<li><code>false</code>: The request is performed synchronously: the call to <code>request()</code> will block until it receives a response from the XML/A server or times out.\nIn this case, the <code>request()</code> method returns \na <code>Rowset</code> (for <code>Discover</code> requests) or \na <code>Resultset</code> (for <code>Execute</code> requests).\nIf you registered any listeners (see <code><a href=\"#method_addListener\">addListener()</a></code>), \nthen these will still be notified of any events (such as receiving the response).\n</li>\n</ul>\n</li>\n</ul>\nInstead of calling this method directly, consider calling \n<code><a href=\"#method_discover\">discover()</a></code> (to obtain a schema rowset),\n<code><a href=\"#method_execute\">execute()</a></code> (to issue a MDX query), \nor one of the specialized <code>discoverXXX()</code> methods (to obtain a particular schema rowset).", "guessedname": "request", "guessedtype": "function"}, "execute": {"return": {"type": "Xmla.Resultset", "description": "The result of the invoking the XML/A <code>Execute</code> method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a <code>Xmla.Resultset</code> that represents the multi-dimensional result set of the MDX query."}, "params": [{"type": "Object", "name": "options", "description": "  An object whose properties convey the options for the XML/A <code>Execute</code> request."}], "description": "Sends an MDX query to a XML/A DataSource to invoke the XML/A <code>Execute</code> method and obtain the multi-dimensional resultset.\nOptions are passed using a generic <code>options</code> object.\nApplicable properties of the <code>options</code> object are:\n<ul>\n<li><code>url</code> {string} REQUIRED the URL of a XML/A datasource. \nThis should be a value obtained from the <code>URL</code> column of the <code>DISCOVER_DATASOURCES</code> rowset\n(see: <code><a href=\"method_discoverDataSources\">discoverDataSources()</a></code>).\n</li>\n<li>\n<code>properties</code> {Object} XML/A properties. \nThe list of all valid properties can be obtained from the <code>DISCOVER_PROPERTIES</code> schema rowset \n(see <code><a href=\"#method_discoverProperties()\">discoverProperties()</a></code>). \nThe <code>execute()</code> requires two properties:<dl>\n<dt><code>DataSourceInfo</code> property</dt>\n<dd>Identifies a data source managed by the XML/A server.\nValid values for this property should be obtained from the <code>DataSourceInfo</code> column \nof the <code>DISCOVER_DATASOURCES</code> schema rowset (see: <code><a href=\"#method_discoverDataSources\">discoverDataSources()</a></code>).\nNote that the values for the <code>DataSourceInfo</code> property and the <code>url</code> must both be taken from the same row of the <code>DISCOVER_DATASOURCES</code> schema rowset.\n</dd>\n<dt><code>DataSourceInfo</code> property</dt>\n<dd>Identifies a data source managed by the XML/A server.\nValid values for this property should be obtained from the <code>DataSourceInfo</code> column \nof the <code>DISCOVER_DATASOURCES</code> schema rowset (see: <code><a href=\"#method_discoverDataSources\">discoverDataSources()</a></code>).\nNote that the values for the <code>DataSourceInfo</code> property and the <code>url</code> must both be taken from the same row of the <code>DISCOVER_DATASOURCES</code> schema rowset.\n</dd>\n</dl>\n</li>\n<li><code>async</code> {boolean} \nDetermines how the request is performed:<ul>\n<li><code>true</code>: The request is performed asynchronously: the call to <code>request()</code> will not block and return immediately.\nIn this case, the return value of the <code>request()</code> method is not defined, \nand the response must be received by registering a listener \n(see <code><a href=\"#method_addListener\">addListener()</a></code>).\n</li>\n<li><code>false</code>: The request is performed synchronously: the call to <code>execute()</code> will block until it receives a response from the XML/A server or times out.\nIn this case, a <code>Resultset</code> is returned that represents the multi-dimensional data set.\nIf you registered any <code>REQUEST_XXX</code> and/or <code>EXECUTE_XXX</code> listeners (see <code><a href=\"#method_addListener\">addListener()</a></code>), \nthen these will still be notified.\n</li>\n</ul>\n</li>\n</ul>", "guessedname": "execute", "guessedtype": "function"}, "discover": {"return": {"type": "Xmla.Rowset", "description": "The result of the invoking the XML/A <code>Discover</code> method. For an asynchronous request, the return value is not defined. For synchronous requests, an instance of a <code><a href=\"Xmla.Rowset.html#Xmla.Rowset\">Xmla.Rowset</a></code> that represents the requested schema rowset."}, "params": [{"type": "Object", "name": "options", "description": "  An object whose properties convey the options for the XML/A <code>Discover</code> request."}], "description": "Sends a request to invoke the XML/A <code>Discover</code> method and returns a schema rowset specified by the <code>requestType</code> option.\nOptions are passed using a generic <code>options</code> object.\nApplicable properties of the <code>options</code> object are:\n<ul>\n<li><code>requestType</code> - {string} Applies to the Discover method and indicates the kind of schema rowset to retrieve.\nYou can use one of the following predefined constants: <ul>\n<li><code><a href=\"#property_DISCOVER_DATASOURCES\">DISCOVER_DATASOURCES</a></code></li>\n<li><code><a href=\"#property_DISCOVER_ENUMERATORS\">DISCOVER_ENUMERATORS</a></code></li>\n<li><code><a href=\"#property_DISCOVER_KEYWORDS\">DISCOVER_KEYWORDS</a></code></li>\n<li><code><a href=\"#property_DISCOVER_LITERALS\">DISCOVER_LITERALS</a></code></li>\n<li><code><a href=\"#property_DISCOVER_PROPERTIES\">DISCOVER_PROPERTIES</a></code></li>\n<li><code><a href=\"#property_DISCOVER_SCHEMA_ROWSETS\">DISCOVER_SCHEMA_ROWSETS</a></code></li>\n</ul>\nYou can also use any Schema Rowset Constant returned in the <code>SchemaName</code> column of the <code>DISCOVER_SCHEMA_ROWSETS</code> rowset\n(see: <code><a href=\"method_discoverMDSchemaRowsets\">discoverMDSchemaRowsets()</a></code>).\n</li>\n<li><code>url</code> {string} REQUIRED the url of the XML/A service or XML/A datasource.        \nIf the value for the <code>requestType</code> option is one of the predefined XML/A <code><a href=\"\">DISCOVER_XXX</a></code> constants, \nthen this should be the url of the XML/A service.\n</li>\n<li>\n<code>properties</code> {Object} XML/A properties. \nThe appropriate types and values of XML/A properties are dependent upon the value passed as <code>requestType</code>.\nThe XML/A standard defines a set of pre-defined properties. \nThe <code>Xmla</code> class defines a static final property for each of these (see the <code>PROP_XXX</code> constants).\nThe list of all valid properties can be obtained from the <code>DISCOVER_PROPERTIES</code> schema rowset \n(see <code><a href=\"#method_discoverProperties()\">discoverProperties()</a></code>). \nEach javascript property of the <code>properties</code> object is mapped literally to a XML/A property.\n</li>\n<li>\n<code>restrictions</code> {Object} XML/A restrictions.\nThese are used to specify a filter that will be applied to the data in the schema rowset.\nEach javascript property of the <code>restrictions</code> object is mapped to a column of the requested schema rowset.\nThe value for the restriction is sent with the request, and processed by the XML/A server to only return matching rows from the requested schema dataset.\nThe name, types and values of the restrictions are dependent upon which schema rowset is requested.\nThe available restrictions are specified by the <code>Restrictions</code> column of the <code>DISCOVER_SCHEMA_ROWSETS</code> schema rowset.\nFor a number of schema rowsets, the avaialale restrictions are pre-defined. \nThese are documented together with each particular <code>discoverXXX()</code> method.\n</li>\n<li><code>async</code> {boolean} \nDetermines how the request is performed:<ul>\n<li><code>true</code>: The request is performed asynchronously: the call to <code>request()</code> will not block and return immediately.\nIn this case, the return value of the <code>request()</code> method is not defined, \nand the response must be received by registering a listener \n(see <code><a href=\"#method_addListener\">addListener()</a></code>).\n</li>\n<li><code>false</code>: The request is performed synchronously: the call to <code>execute()</code> will block until it receives a response from the XML/A server or times out.\nIn this case, a <code>Resultset</code> is returned that represents the multi-dimensional data set.\nIf you registered any <code>REQUEST_XXX</code> and/or <code>EXECUTE_XXX</code> listeners (see <code><a href=\"#method_addListener\">addListener()</a></code>), \nthen these will still be notified.\n</li>\n</ul>\n</li>\n</ul>\nInstead of calling this method directly, consider calling \nor one of the specialized <code>discoverXXX()</code> methods to obtain a particular schema rowset.", "guessedname": "discover", "guessedtype": "function"}}, "file": "Xmla.js", "guessedtype": "function", "shortname": "Xmla", "properties": {"responseText": {"default": "null", "type": "{string}", "description": "This property is set to <code>null</code> right before sending an XML/A request.\nWhen a successfull response is received, the XML response is stored to this property as plain text.\nIf you are interested in processing a DOM document rather than the raw XML text, see the \n<code><a href=\"#property_responseXML\">responseXML</a></code> property.\nIf you are interested in traversing the dataset returned in the XML/A response, see the\n<code><a href=\"#property_response\">response</a></code> property.\nNote that it is not safe to read this property immediately after doing an asynchronous request.\nFor asynchronous requests, you can read this property by the time the <code>XXX_SUCCESS</code> event handlers are notified (until it is set to <code>null</code> again by a subsequent request).", "guessedname": "responseText", "guessedtype": "property"}, "DBSCHEMA_CATALOGS": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DBSCHEMA_CATALOGS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverDBCatalogs\">discoverDBCatalogs()</a></code> method. \nThe <code>discoverDBCatalogs()</code> method issues a request to invoke the Discover method using <code>DBSCHEMA_CATALOGS</code> as requestType.", "default": "DBSCHEMA_CATALOGS", "static": "", "guessedname": "DBSCHEMA_CATALOGS", "guessedtype": "property", "type": "string", "final": ""}, "DISCOVER_LITERALS": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_LITERALS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverLiterals\">discoverLiterals()</a></code> method. \nThe <code>discoverLiterals()</code> method issues a request to invoke the Discover method using DISCOVER_LITERALS as requestType.", "default": "DISCOVER_LITERALS", "static": "", "guessedname": "DISCOVER_LITERALS", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_ERROR": {"description": "Indicates the <code>error</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>error</code> is fired when an error occurs while sending a request or receiving a response.\nThe <code>error</code> event is not method-specific, and fires for errors encountered during both <code>Execute</code> as well as <code>Discover</code> method invocations.", "default": "error", "static": "", "guessedname": "EVENT_ERROR", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_EXECUTE": {"description": "Indicates the <code>execute</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>execute</code> event is method-specific, and is fired before submitting an <code>Execute</code> request\n(see: <code><a href=\"#method_execute\">execute()</a></code>)\nto the server, but after firing the <code>request</code> event\n(see: <code><a href=\"#property_EVENT_REQUEST\">EVENT_REQUEST</a></code>).", "default": "execute", "static": "", "guessedname": "EVENT_EXECUTE", "guessedtype": "property", "type": "string", "final": ""}, "PROP_CONTENT_SCHEMA": {"description": "Can be used as value for the XML/A <code>Content</code> property \n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should only return XML Schema metadata, but no data.", "default": "Schema", "static": "", "guessedname": "PROP_CONTENT_SCHEMA", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_REQUEST": {"description": "Indicates the <code>request</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>request</code> event is the first event that is fired before submitting a request \n(see: <code><a href=\"#method_request\">request()</a></code>)\nto the server, and before firing the method-specific request events \n(see <code><a href=\"#property_EVENT_EXECUTE\">EVENT_EXECUTE</a></code> \nand <code><a href=\"#property_EVENT_DISCOVER\">EVENT_DISCOVER</a></code>). \nThe <code>request</code> event itself is not method-specific, and fires for <code>Execute</code> as well as <code>Discover</code> requests.", "default": "request", "static": "", "guessedname": "EVENT_REQUEST", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_DISCOVER_ERROR": {"description": "Indicates the <code>discovererror</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>discovererror</code> is method-specific and fired when an error occurs while sending an <code>Discover</code> request, \nor receiving a response to an <code>Discover</code method.\n(see: <code><a href=\"#method_discover\">discover()</a></code>).", "default": "discovererror", "static": "", "guessedname": "EVENT_DISCOVER_ERROR", "guessedtype": "property", "type": "string", "final": ""}, "PROP_CONTENT_NONE": {"description": "Can be used as value for the XML/A <code>Content</code> property \n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should contain neither data nor XML Schema metadata.\nThis is useful to check the validity of the request.", "default": "None", "static": "", "guessedname": "PROP_CONTENT_NONE", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_EXECUTE_ERROR": {"description": "Indicates the <code>executeerror</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>executeerror</code> event is method-specific and fired when an error occurs while sending an <code>Execute</code> request, or receiving a response to an <code>Execute</code method.\n(see: <code><a href=\"#method_execute\">execute()</a></code>).", "default": "executeerror", "static": "", "guessedname": "EVENT_EXECUTE_ERROR", "guessedtype": "property", "type": "string", "final": ""}, "PROP_CONTENT": {"description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object \npassed to the <code><a href=\"#method_request\">request()</a></code> method \nto specify the XML/A <code>Content</code> property.\nThe XML/A <code>Content</code> property specifies whether to return data and/or XML Schema metadata by the <code>Discover</code> and <code>Execute</code> invocations.\nValid values for the <code>Content</code> property are available as the static final properties \n<code><a href=\"#property_PROP_CONTENT_DATA\">PROP_CONTENT_DATA</a></code>, \n<code><a href=\"#property_PROP_CONTENT_NONE\">PROP_CONTENT_NONE</a></code>, \n<code><a href=\"#property_PROP_CONTENT_SCHEMA\">PROP_CONTENT_SCHEMA</a></code>, \n<code><a href=\"#property_PROP_CONTENT_SCHEMADATA\">PROP_CONTENT_SCHEMADATA</a></code>.\nNote: This key is primarily intended for clients that use the low-level <code><a href=\"#method_request\">request()</a></code> method.\nYou should not set this property when calling the <code><a href=\"#method_request\">discover()</a></code> method, \nthe <code><a href=\"#method_execute\">execute()</a></code> method, \nor any of the <code>discoverXXX()</code> methods.", "default": "Content", "static": "", "guessedname": "PROP_CONTENT", "guessedtype": "property", "type": "string", "final": ""}, "DISCOVER_KEYWORDS": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_KEYWORDS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this requestType yourself, consider calling the <code><a href=\"#method_discoverLiterals\">discoverKeywords()</a></code> method. \nThe <code>discoverKeywords()</code> method issues a request to invoke the Discover method using DISCOVER_KEYWORDS as requestType.", "default": "DISCOVER_KEYWORDS", "static": "", "guessedname": "DISCOVER_KEYWORDS", "guessedtype": "property", "type": "string", "final": ""}, "PROP_AXISFORMAT_TUPLE": {"description": "Can be used as value for the <code>AxisFormat</code> XML/A property \n(see: <code><a href=\"#property_PROP_AXISFORMAT\">PROP_AXISFORMAT</a></code>) \nin invocations of the <code>Execute</code> method \n(see: <code><a href=\"#method_request\">execute()</a></code>).", "default": "TupleFormat", "static": "", "guessedname": "PROP_AXISFORMAT_TUPLE", "guessedtype": "property", "type": "string", "final": ""}, "PROP_AXISFORMAT": {"description": "Can be used as key in the <code>properties</code> member of the <code>options</code> object \npassed to the <code><a href=\"#method_request\">execute()</a></code> method \nto specify the XML/A <code>AxisFormat</code> property.\nThe XML/A <code>AxisFormat</code> property specifies how the client wants to receive the multi-dimensional resultset of a MDX query.\nValid values for the <code>AxisFormat</code> property are available as the static final properties \n<code><a href=\"#property_PROP_AXISFORMAT_TUPLE\">PROP_AXISFORMAT_TUPLE</a></code>, \n<code><a href=\"#property_PROP_AXISFORMAT_CLUSTER\">PROP_AXISFORMAT_CLUSTER</a></code>,\n<code><a href=\"#property_PROP_AXISFORMAT_CUSTOM\">PROP_AXISFORMAT_CUSTOM</a></code>.", "default": "AxisFormat", "static": "", "guessedname": "PROP_AXISFORMAT", "guessedtype": "property", "type": "string", "final": ""}, "responseXml": {"default": "null", "type": "{DOMDocument}", "description": "This property is set to <code>null</code> right before sending an XML/A request.\nWhen a successfull response is received, the XML response is stored to this property as a DOM Document.\nIf you are interested in processing the raw XML text rather than a DOM document, see the \n<code><a href=\"#property_responseText\">responseText</a></code> property.\nIf you are interested in traversing the dataset returned in the XML/A response, see the\n<code><a href=\"#property_response\">response</a></code> property.\nNote that it is not safe to read this property immediately after doing an asynchronous request.\nFor asynchronous requests, you can read this property by the time the <code>XXX_SUCCESS</code> event handlers are notified (until it is set to <code>null</code> again by a subsequent request).", "guessedname": "responseXml", "guessedtype": "property"}, "PROP_CONTENT_SCHEMADATA": {"description": "Can be used as value for the XML/A <code>Content</code> property \n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should return both data as well as XML Schema metadata.", "default": "SchemaData", "static": "", "guessedname": "PROP_CONTENT_SCHEMADATA", "guessedtype": "property", "type": "string", "final": ""}, "METHOD_EXECUTE": {"description": "Can be used as value for the method option property in the options objecct passed to the \n<code><a href=\"#method_request\">request()</code></a> method to invoke the XML/A Execute method on the server. \nInstead of explicitly setting the method yourself, consider using the <code><a href=\"#method_execute\">execute()</a></code> method.\nThe <code>execute()</code> method automatically sets the method option to <code>METHOD_EXECUTE</code>.", "default": "Discover", "static": "", "guessedname": "METHOD_EXECUTE", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_DISCOVER": {"description": "Indicates the <code>discover</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>discover</code> event is method-specific, and is fired before submitting a <code>Discover</code> request\n(see: <code><a href=\"#method_discover\">discover()</a></code>)\nto the server, but after firing the <code>request</code> event\n(see: <code><a href=\"#property_EVENT_DISCOVER\">EVENT_DISCOVER</a></code>).", "default": "discover", "static": "", "guessedname": "EVENT_DISCOVER", "guessedtype": "property", "type": "string", "final": ""}, "PROP_CONTENT_DATA": {"description": "Can be used as value for the XML/A <code>Content</code> property \n(see: <code><a href=\"#property_PROP_CONTENT\">PROP_CONTENT</a></code>).\nThis value specifies that the response should contain only data, but no XML Schema metadata.\nAs the <code>Xmla</code> class relies on the XML Schema metadata to construct Rowset and Resultset instances,\nthis option is primarily useful if you know how to process the XML response directly.", "default": "Data", "static": "", "guessedname": "PROP_CONTENT_DATA", "guessedtype": "property", "type": "string", "final": ""}, "PROP_AXISFORMAT_CLUSTER": {"description": "Can be used as value for the <code>AxisFormat</code> XML/A property \n(see: <code><a href=\"#property_PROP_AXISFORMAT\">PROP_AXISFORMAT</a></code>) \nin invocations of the <code>Execute</code> method \n(see: <code><a href=\"#method_request\">execute()</a></code>).", "default": "ClusterFormat", "static": "", "guessedname": "PROP_AXISFORMAT_CLUSTER", "guessedtype": "property", "type": "string", "final": ""}, "DISCOVER_ENUMERATORS": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_ENUMERATORS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverEnumerators\">discoverEnumerators()</a></code> method. \nThe <code>discoverSchemaRowsets()</code> method issues a request to invoke the Discover method using <code>DISCOVER_SCHEMA_ROWSETS</code> as requestType.", "default": "DISCOVER_ENUMERATORS", "static": "", "guessedname": "DISCOVER_ENUMERATORS", "guessedtype": "property", "type": "string", "final": ""}, "METHOD_DISCOVER": {"description": "Can be used as value for the method option in the options object passed to the \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server. \nInstead of explicitly setting the method yourself, consider using the <code><a href=\"#method_request\">discover()</a></code> method.\nThe <code>discover()</code> method automatically sets the method option to <code>METHOD_DISCOVER</code>.", "default": "Discover", "static": "", "guessedname": "METHOD_DISCOVER", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_DISCOVER_SUCCESS": {"description": "Indicates the <code>discoversuccess</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>discoversuccess</code> event is method-specific and fired only after receiving and processing a normal response \n(that is, a response that does not contain a <code>SoapFault</code>)\nto an incovation of the XML/A <code>Discover</code> method\n(see: <code><a href=\"#method_discover\">discover()</a></code>).", "default": "discoversuccess", "static": "", "guessedname": "EVENT_DISCOVER_SUCCESS", "guessedtype": "property", "type": "string", "final": ""}, "DISCOVER_DATASOURCES": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_DATASOURCES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this constant as requestType yourself, consider calling the <code><a href=\"#method_discoverDataSources\">discoverDataSources()</a></code> method. \nThe <code>discoverDataSources()</code> method passes <code>DISCOVER_DATASOURCES</code> automatically as requestType for Discover requests.", "default": "DISCOVER_DATASOURCES", "static": "", "guessedname": "DISCOVER_DATASOURCES", "guessedtype": "property", "type": "string", "final": ""}, "DISCOVER_SCHEMA_ROWSETS": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_SCHEMA_ROWSETS</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverSchemaRowsets\">discoverSchemaRowsets()</a></code> method. \nThe <code>discoverProperties()</code> method passes <code>DISCOVER_PROPERTIES</code> automatically as requestType for Discover requests.", "default": "DISCOVER_SCHEMA_ROWSETS", "static": "", "guessedname": "DISCOVER_SCHEMA_ROWSETS", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_SUCCESS": {"description": "Indicates the <code>success</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>success</code> event  is the last event that is fired after receiving and processing a normal response \n(that is, a response that does not contain an XML/A <code>SoapFault</code>),\nafter firing the method-specific success events \n(see <code><a href=\"#property_EVENT_EXECUTE_SUCCESS\">EVENT_EXECUTE_SUCCESS</a></code> \nand <code><a href=\"#property_EVENT_DISCOVER_SUCCESS\">EVENT_DISCOVER_SUCCESS</a></code>). \nThe <code>success</code> event is not method-specific, and fires for <code>Execute</code> as well as <code>Discover</code> responses.", "default": "success", "static": "", "guessedname": "EVENT_SUCCESS", "guessedtype": "property", "type": "string", "final": ""}, "listeners": {"description": "This object stores listeners.\nEach key is a listener type (see the static final <code>EVENT_XXX</code> constants), \neach value is an array of listener objects that are subscribed to that particular event.", "default": "{\n\"request\": []\n,   \"succss\": []\n,   \"error\": []\n,   \"discover\": []\n,   \"discoversuccss\": []\n,   \"discovererror\": []\n,   \"execute\": []\n,   \"executesuccss\": []\n,   \"executeerror\": []\n}", "protected": "", "guessedname": "listeners", "guessedtype": "property", "type": "Object"}, "DISCOVER_PROPERTIES": {"description": "Can be used as value for the <code>requestType</code> option in the options object passed to the to \n<code><a href=\"#method_request\">request()</a></code> method to invoke the XML/A Discover method on the server to return the <code>DISCOVER_PROPERTIES</code> schema rowset.\nThe <code>requestType</code> option applies only to Discover requests.\nInstead of passing this <code>requestType</code> yourself, consider calling the <code><a href=\"#method_discoverProperties\">discoverProperties()</a></code> method. \nThe <code>discoverProperties()</code> method passes <code>DISCOVER_PROPERTIES</code> automatically as requestType for Discover requests.", "default": "DISCOVER_PROPERTIES", "static": "", "guessedname": "DISCOVER_PROPERTIES", "guessedtype": "property", "type": "string", "final": ""}, "response": {"default": "null", "type": "Xmla.Rowset|Xmla.Resultset", "description": "This property is set to <code>null</code> right before sending an XML/A request.\nWhen a successfull response is received, it is processed and the response object is assigned to this property.\nThe response object is either a \n<code><a href=\"Rowset.html#class_Rowset\">Rowset</a></code> (after a successful invocation of XML/A <code>Discover</code> method, see: <code><a href=\"method_discover\">discover()</a></code>) or a\n<code><a href=\"Resultset.html#class_Resultset\">Resultset</a></code> (after a successful invocation of the XML/A <code>Execute</code> method, see: <code><a href=\"method_execute\">executte()</a></code>) \ninstance. \nIf you are interested in processing the raw response XML, see \n<code><a href=\"#property_responseXML\">responseXML</a></code> and \n<code><a href=\"#property_responseText\">responseText</a></code>.\nNote that it is not safe to read this property immediately after doing an asynchronous request.\nFor asynchronous requests, you can read this property by the time the <code>XXX_SUCCESS</code> event handlers are notified (until it is set to <code>null</code> again by a subsequent request).", "guessedname": "response", "guessedtype": "property"}, "PROP_AXISFORMAT_CUSTOM": {"description": "Can be used as value for the <code>AxisFormat</code> XML/A property \n(see: <code><a href=\"#property_PROP_AXISFORMAT\">PROP_AXISFORMAT</a></code>) \nin invocations of the <code>Execute</code> method \n(see: <code><a href=\"#method_request\">execute()</a></code>).", "default": "CustomFormat", "static": "", "guessedname": "PROP_AXISFORMAT_CUSTOM", "guessedtype": "property", "type": "string", "final": ""}, "EVENT_EXECUTE_SUCCESS": {"description": "Indicates the <code>executesuccess</code> event. \nThis constant can be used as en entry in the events array argument for the <code><a href=\"#method_addListener\">addListener()</a></code> method.\nThe <code>executesuccess</code> event is method-specific and fired only after receiving and processing a normal response \n(that is, a response that does not contain a <code>SoapFault</code>)\nto an incovation of the XML/A <code>Execute</code> method\n(see: <code><a href=\"#method_execute\">execute()</a></code>).", "default": "executesuccess", "static": "", "guessedname": "EVENT_EXECUTE_SUCCESS", "guessedtype": "property", "type": "string", "final": ""}}, "description": "<p>\nThe Xmla class provides a javascript API to communicate XML for Analysis (XML/A) over HTTP.\nXML/A is an industry standard protocol that allows webclients to work with OLAP servers.\nTo fully understand the scope and purpose of this utility, it is highly recommended\nto read <a href=\"http://xmla.org/xmla1.1.doc\">the XML/A specification</a> \n(MS Word format. For other formats, \nsee: <a href=\"http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification\">http://code.google.com/p/xmla4js/source/browse/#svn/trunk/doc/xmla1.1 specification</a>). \n</p>"}}, "version": "r12", "modules": {"xmla": {"description": "Xmla implements a XML for Analysis (XML/A) client in javascript.\nUsing this utility you can communicate with XML/A enabled OLAP servers \nto obtain metadata and to issue MDX queries.", "submodules": [], "classlist": ["Xmla", "Xmla.Rowset", "Xmla.Rowset"], "title": "Xmla utility", "filelist": ["Xmla.js"], "subdata": {}, "name": "xmla"}}, "filemap": {"Xmla.js": {"classlist": ["Xmla", "Xmla.Rowset", "Xmla.Rowset"], "name": "Xmla.js", "module": "xmla"}}}